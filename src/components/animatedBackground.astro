---
---
<canvas id="bg-canvas" style="position:fixed; inset:0; z-index:-1; width:100vw; height:100vh;"></canvas>
<script>
  // === CONFIGURACIÓN FÁCIL DE MOLDEAR ===
  const numHearts = 60; // Número de corazones
  const minHeartSize = 20; // Tamaño mínimo del corazón (entero)
  const maxHeartSize = 35; // Tamaño máximo del corazón (entero)

  // Colores personalizados
  const particleColor = "#FF0000FF";

  interface Heart {
    x: number;
    y: number;
    size: number;
    speed: number;
    opacity: number;
    rotation: number;
    rotationSpeed: number;
  }
  
  const hearts: Heart[] = [];

  function resizeCanvas(canvas: HTMLCanvasElement) {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }

  function createHearts(canvas: HTMLCanvasElement) {
    hearts.length = 0;
    for (let i = 0; i < numHearts; i++) {
      hearts.push({
        x: Math.random() * canvas.width,
        y: Math.random() * canvas.height, // Aparece en cualquier parte vertical
        size: Math.random() * (maxHeartSize - minHeartSize) + minHeartSize,
        speed: Math.random() * 2 + 1,
        opacity: Math.random() * 0.6 + 0.4,
        rotation: Math.random() * Math.PI * 2,
        rotationSpeed: (Math.random() - 0.5) * 0.02
      });
    }
  }

  function drawBackground(ctx: CanvasRenderingContext2D, canvas: HTMLCanvasElement) {
    // Gradiente horizontal de tres colores
    const grad = ctx.createLinearGradient(0, 0, canvas.width, 0);
    grad.addColorStop(0, "#FFBBBBFF");    // Color base (izquierda)
    grad.addColorStop(0.5, "#FFA2A2FF");  // Color claro (centro)
    grad.addColorStop(1, "#FF8F8FFF");    // Color más oscuro (derecha)

    ctx.fillStyle = grad;
    ctx.fillRect(0, 0, canvas.width, canvas.height);
  }

  function drawHeart(ctx: CanvasRenderingContext2D, x: number, y: number, size: number, opacity: number, rotation: number) {
    ctx.save();
    ctx.translate(x, y);
    ctx.rotate(rotation);
    ctx.scale(size / 32, size / 32); // Escala el corazón al tamaño deseado
    ctx.globalAlpha = opacity;

    ctx.beginPath();
    for (let t = 0; t <= Math.PI * 2; t += 0.05) {
      const hx = 16 * Math.pow(Math.sin(t), 3);
      const hy = 13 * Math.cos(t) - 5 * Math.cos(2 * t) - 2 * Math.cos(3 * t) - Math.cos(4 * t);
      if (t === 0) {
        ctx.moveTo(hx, -hy); // Invertir Y para que el corazón apunte hacia abajo
      } else {
        ctx.lineTo(hx, -hy);
      }
    }
    ctx.closePath();
    ctx.fillStyle = particleColor;
    ctx.fill();

    ctx.restore();
  }

  function drawHearts(ctx: CanvasRenderingContext2D) {
    for (const heart of hearts) {
      drawHeart(ctx, heart.x, heart.y, heart.size, heart.opacity, heart.rotation);
    }
  }

  function animate(canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D) {
    drawBackground(ctx, canvas);
    drawHearts(ctx);
    
    // Mover corazones
    for (const heart of hearts) {
      heart.y += heart.speed;
      heart.rotation += heart.rotationSpeed;
      
      // Si el corazón sale por abajo, lo reposiciona arriba
      if (heart.y > canvas.height + 50) {
        heart.y = -20 - Math.random() * 100;
        heart.x = Math.random() * canvas.width;
        heart.opacity = Math.random() * 0.6 + 0.4;
        heart.speed = Math.random() * 2 + 1;
        heart.size = Math.random() * (maxHeartSize - minHeartSize) + minHeartSize;
      }
    }
    
    requestAnimationFrame(() => animate(canvas, ctx));
  }

  window.addEventListener("DOMContentLoaded", () => {
    const canvas = document.getElementById("bg-canvas") as HTMLCanvasElement;
    if (!canvas) return;
    
    const ctx = canvas.getContext("2d");
    if (!ctx) return;
    
    resizeCanvas(canvas);
    createHearts(canvas);
    animate(canvas, ctx);
    
    window.addEventListener("resize", () => {
      resizeCanvas(canvas);
      createHearts(canvas);
    });
  });
</script>
